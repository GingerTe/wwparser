# coding: utf-8
import json
import os
import re
from copy import copy

import lxml.html as html

DIRECTORY_WITH_LOGS = r'C:\Users\Kwert\Downloads\Telegram Desktop\ChatExport_08_11_2018'
ADD_TO_FILE = False
PARAMS_REGEXP = re.compile(r'.*\d+/\d+ üçó\d+% üîã\d+/\d+ üë£(\d+)+–∫–º(.*)')
RESULT_FILE_NAME = 'all.json'
RESULT_TO_APPEND_FILE_NAME = 'all.json'

if not ADD_TO_FILE:
    res = {}
else:
    with open(RESULT_TO_APPEND_FILE_NAME, encoding='utf8') as f:
        res = json.load(f)

# regexp = re.compile('.*([–ê-—è ]+).*(\d+)–∫–º\s*(.*)–ù–∞–π–¥–µ–Ω–æ: (.+)(–ü–æ–ª—É—á–µ–Ω–æ: (.+))*')
# fight = '([^‚ù§]+).*(\d+)–∫–º\s*(–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª\s*([^.]+)).*'

skip_line_anchors = '–ù–∞–π–¥–µ–Ω–æ', '–¢—ã —Ä–∞–Ω–µ–Ω', '–ü–æ—Ç–µ—Ä—è–Ω–æ', '–ü—Ä–æ–µ–±–∞–Ω–æ', '–¢—ã –ø–æ—Ç–µ—Ä—è–ª', '–±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è üëä–†–µ–π–¥', \
                    '/help', '–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –≤ –¢–µ–º–Ω–æ–π –∑–æ–Ω–µ', '–ù–∞–π–¥–µ–Ω –¥—Ä–æ–Ω'

skip_block_anchors = '–¢—ã —Ç–æ–∂–µ —Ö–ª–∞–º —Å–æ–±–∏—Ä–∞–µ—à—å', '–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–¥–∏–ª', '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫', '–°—Ç–∞—Ä—å—ë–≤—â–∏–∫', \
                     '–•–ª–∞–º–æ—Å–±–æ—Ä—â–∏–∫', '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–Ω–∞–ø–∞–ª', '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–π —Å—Ö–≤–∞—Ç–∫–µ', \
                     '–ë–µ–∑—É–º–Ω—ã–π —Å—Ç–∞—Ä–∏–∫', '–û–Ω–∏ –≤—Å–µ –º–µ—Ä—Ç–≤—ã', '–¢–µ–±—è –±—É–∫–≤–∞–ª—å–Ω–æ —Ä–∞–∑–º–∞–∑–∞–ª–∏', \
                     '–ù–µ–¥–∞–ª–µ–∫–æ –æ—Ç —Å–µ–±—è —Ç—ã –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫–æ–≥–æ-—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞', '–ù–µ–¥–∞–ª–µ–∫–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫–æ–≥–æ-—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞', \
                     '–ë–µ–ª–æ–µ –≥–µ—Ç—Ç–æ', '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–π'


def check_skipped(l, type_='line'):
    if type_ == 'all':
        skip_list = skip_block_anchors
    else:
        skip_list = skip_line_anchors
    for si in skip_list:
        if si in l:
            return True
    return False


for name in os.listdir(DIRECTORY_WITH_LOGS):
    if not name.endswith('.html'):
        continue

    with open(os.path.join(DIRECTORY_WITH_LOGS, name), encoding='utf8') as f:
        data = f.read()

    doc = html.document_fromstring(data)
    for br in doc.xpath("*//br"):
        br.tail = "\n" + br.tail if br.tail else "\n"
    msgs = doc.find_class('text')

    for msg in msgs:

        content = msg.text_content().strip().split('\n')

        location = None
        km = None
        txt = []
        received = []
        bonus = []
        f_skip_line = False
        f_skip_block = False

        for index, line in enumerate(content):
            line = line.strip()
            if not line:
                continue
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ª–æ–∫–∞—Ü–∏—è
            elif not location:
                location = line
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            elif PARAMS_REGEXP.match(line):
                km = PARAMS_REGEXP.match(line).group(1)
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é, –¥–∞–ª—å—à–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –∫–º
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–º
            elif location and not km or check_skipped(line, 'all'):
                f_skip_block = True
                break
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É
            elif check_skipped(line, 'line'):
                continue
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ö–ª–∞–º–∞
            elif line.startswith('–ü–æ–ª—É—á–µ–Ω–æ'):
                s = line.split(':')
                received.append(s[1].strip())
                # if len(s) > 1:
                #     num = ''.join(i for i in line if i.isdigit())
                #     get[-1]['num'] = int(num) if num else 1
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
            elif line.startswith('–ë–æ–Ω—É—Å'):
                line = line[7:]
                if '‚ù§' in line:
                    continue
                else:
                    bonus.append(line)

            else:
                txt.append(line)
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫, –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–º, –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–∫—É
        if f_skip_block or not km or not txt:
            continue
        km = int(km)
        txt = ' '.join(txt)

        # –£–±–∏—Ä–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–æ–∫–∞—Ü–∏–∏
        if '(' in location:
            location = location[:location.index('(')]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É
        zone = 'safe zone'
        if location.startswith('üö∑'):
            zone = 'dark zone'
            location = location[2:]

        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ
        if txt not in res:
            res[txt] = {}
        if zone not in res[txt]:
            res[txt][zone] = {'received': {}, 'location': [], 'km': [], 'bonus': []}
        # res[txt] = res.get(txt, {})
        # res[txt][zone] = res.get(zone, {'get': [], 'location': [], 'km': [], 'bonus': []})

        block = res[txt][zone]
        if received:
            received = ', '.join(received)

            block['received'][received] = block['received'].get(received, 0) + 1
        if bonus:
            block['bonus'].append(bonus)

        if km not in block['km']:
            block['km'].append(km)

        if location not in block['location']:
            block['location'].append(location)

        # res[km] = res.get(km, []) + [{
        #     'location': location,
        #     'txt': ' '.join(txt),
        #     'get': get
        # }]

# –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
for data in res.values():
    for i in data.values():
        for key in copy(i):
            if not i[key]:
                del i[key]

with open(RESULT_FILE_NAME, 'w', encoding='utf8') as f:
    json.dump(res, f, indent=2, ensure_ascii=False)
