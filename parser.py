# coding: utf-8
import datetime
import os
import re
import yaml

from sqlalchemy.orm import sessionmaker

from engine import engine
from model import Data, Drop
import lxml.html as html
import logging.config

DATE_FORMAT = '%d.%m.%Y %H:%M:%S'

with open('logging.yaml', 'rt') as f:
    config = yaml.safe_load(f.read())
    f.close()
logging.config.dictConfig(config)
logger = logging.getLogger(__name__)
logger.info("Contest is starting")

location_dict = {
    '–ì–∏–º–Ω–∞–∑–∏—è': '–®–∫–æ–ª–∞',
    '–°–∫–ª–∞–¥ —Ñ—É—Ä–∞–∂–∞': '–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç',
    '–î–æ–º —Ä–æ—Å—Ç–æ–≤—â–∏–∫–∞': '–ë–∞–Ω–∫',
    '–ü–æ–ª–µ–≤–∞—è –∂–∞–Ω–¥–∞—Ä–º–µ—Ä–∏—è': '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π —É—á–∞—Å—Ç–æ–∫'
}

drop_dict = {
    'üî©': '–ò—Ä–∏–¥–∏–π',
    'üíæ': '–ú–∏–∫—Ä–æ—á–∏–ø',
    'üí°': '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
    'üîó': '',
    'üîπ': '–ö–≤–∞—Ä—Ü',
    'üï≥': '–ö—Ä—ã—à–∫–∏',
    '+': ' ',
    'x': ' ',
    ':': '',
    'üì¶': '–ú–∞—Ç—ã '
}


class Parser:
    SKIP_LINE_ANCHORS = '–ù–∞–π–¥–µ–Ω–æ', '–¢—ã —Ä–∞–Ω–µ–Ω', '–ü–æ—Ç–µ—Ä—è–Ω–æ', '–ü—Ä–æ–µ–±–∞–Ω–æ', '–¢—ã –ø–æ—Ç–µ—Ä—è–ª', '–±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è üëä–†–µ–π–¥', \
                        '/help', '–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –≤ –¢–µ–º–Ω–æ–π –∑–æ–Ω–µ', '–ù–∞–π–¥–µ–Ω –¥—Ä–æ–Ω', '–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª', \
                        '–¢—ã –ø–æ–∫–∏–¥–∞–µ—à—å –¢–µ–º–Ω—É—é –∑–æ–Ω—É', '–¢–µ–±–µ —É–¥–∞–ª–æ—Å—å –∏–∑–±–µ–∂–∞—Ç—å —Å—Ö–≤–∞—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–∫–æ–µ –º–æ–¥–Ω–æ–µ ' \
                                                    '–º–æ–ª–æ–¥–µ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–∞–∫ "–±–µ–≥"'

    SKIP_BLOCK_ANCHORS = '–¢—ã —Ç–æ–∂–µ —Ö–ª–∞–º —Å–æ–±–∏—Ä–∞–µ—à—å', '–¢–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–≥—Ä–∞–¥–∏–ª', '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫', '–°—Ç–∞—Ä—å—ë–≤—â–∏–∫', \
                         '–•–ª–∞–º–æ—Å–±–æ—Ä—â–∏–∫', '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', '–í–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ —Ç–µ–±—è –Ω–∞–ø–∞–ª', \
                         '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–π —Å—Ö–≤–∞—Ç–∫–µ', \
                         '–ë–µ–∑—É–º–Ω—ã–π —Å—Ç–∞—Ä–∏–∫', '–û–Ω–∏ –≤—Å–µ –º–µ—Ä—Ç–≤—ã', '–¢–µ–±—è –±—É–∫–≤–∞–ª—å–Ω–æ —Ä–∞–∑–º–∞–∑–∞–ª–∏', \
                         '–ù–µ–¥–∞–ª–µ–∫–æ –æ—Ç —Å–µ–±—è —Ç—ã –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫–æ–≥–æ-—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞', '–ù–µ–¥–∞–ª–µ–∫–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –∫–∞–∫–æ–≥–æ-—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞', \
                         '–ë–µ–ª–æ–µ –≥–µ—Ç—Ç–æ', '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–π'

    PARAMS_REGEXP = re.compile(r'.*\d+/\d+ üçó\d+% üîã\d+/\d+ üë£(\d+)+–∫–º(.*)')

    def __init__(self, log_dir='data'):
        self.log_dir = log_dir
        self.current_line = ''
        self.doc = None

        session = sessionmaker()
        session.configure(bind=engine)
        self.session = session()

        self.session.query(Data).delete()
        self.session.commit()

    def _fix_br(self):
        for br in self.doc.xpath("*//br"):
            br.tail = "\n" + br.tail if br.tail else "\n"

    def check_skipped(self, type_='line'):
        if type_ == 'all':
            skip_list = self.SKIP_BLOCK_ANCHORS
        else:
            skip_list = self.SKIP_LINE_ANCHORS

        for si in skip_list:
            if si in self.current_line:
                return True
        return False

    def parse_all(self):
        for user in os.listdir(self.log_dir):
            self.parse_user(user)

    def parse_user(self, user):
        logger.info(user)
        user_dir = os.path.join(self.log_dir, user)
        for name in os.listdir(user_dir):
            self._parse_document(user, os.path.join(user_dir, name))

    def _parse_document(self, user, file_name):
        if not file_name.endswith('.html'):
            return

        with open(file_name, encoding='utf8') as file_doc:
            self.doc = html.document_fromstring(file_doc.read())
        self._fix_br()
        body = self.doc.find_class('body')

        for block in body:
            self._parse_block(user, block)
        self.session.commit()

    def _parse_block(self, user, block):
        msg_date = self._get_date(block)

        msg = self._get_msg(block)

        if not (msg_date and msg):
            return
        data = Data(user=user, date=msg_date, zone='safe')
        data.txt = []
        data.received = []
        data.bonus = []

        content = msg.text_content().strip().split('\n')

        for index, self.current_line in enumerate(content):
            self.current_line = self.current_line.strip()
            if not self.current_line:
                continue
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ª–æ–∫–∞—Ü–∏—è
            elif not data.location:
                self._format_location_and_zone(data)
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            elif self.PARAMS_REGEXP.match(self.current_line):
                self._format_km(data)
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é, –¥–∞–ª—å—à–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –∫–º
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã–º
            elif (data.location and not data.km) or self.check_skipped('all'):
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É
            elif self.check_skipped('line'):
                continue
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ö–ª–∞–º–∞
            elif self.current_line.startswith('–ü–æ–ª—É—á–µ–Ω–æ'):
                self._format_drop(data)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
            elif self.current_line.startswith('–ë–æ–Ω—É—Å'):
                self._format_bonus(data)
            else:
                data.txt.append(self.current_line)
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫, –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–º, –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–∫—É
        if not (data.km and data.txt):
            return
        data.txt = ' '.join(data.txt)

        self.session.add(data)

    def _format_km(self, data):
        km = self.PARAMS_REGEXP.match(self.current_line).group(1)
        data.km = int(km)

    def _format_drop(self, data):
        self.current_line = self.current_line[len('–ü–æ–ª—É—á–µ–Ω–æ'):]
        self._got_formatter()
        data.received.append(self.current_line)

    def _got_formatter(self):
        for key in drop_dict:
            self.current_line = self.current_line.replace(key, drop_dict[key])
        self.current_line = self.current_line.strip()
        self.current_line = re.sub(' +', ' ', self.current_line)

    def _format_bonus(self, data):
        self.current_line = self.current_line[len('–ë–æ–Ω—É—Å'):]
        if '‚ù§' in self.current_line:
            return
        else:
            self._got_formatter()
            data.bonus.append(self.current_line)

    def _format_location_and_zone(self, data):
        data.location = self.current_line
        # –£–±–∏—Ä–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–æ–∫–∞—Ü–∏–∏
        if '(' in data.location:
            data.location = data.location[:data.location.index('(')]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É
        if data.location.startswith('üö∑'):
            data.zone = 'dark'
            data.location = data.location[2:].strip()
        data.location = location_dict.get(data.location, data.location)

    @staticmethod
    def _get_msg(block):
        msg = block.find_class('text')
        if msg:
            msg = msg[0]
            return msg

    @staticmethod
    def _get_date(block):
        msg_date = None
        date_element = block.find_class('date')
        if date_element:
            date_string = date_element[0].attrib['title']
            msg_date = datetime.datetime.strptime(date_string, DATE_FORMAT)
        return msg_date

    def __del__(self):
        self.session.close()


def drop_formatter():
    Session = sessionmaker()
    Session.configure(bind=engine)
    session = Session()

    for data in session.query(Data).all():
        for attr in ('received', 'bonus'):
            if data.__getattribute__(attr):
                data_drop = data.__getattribute__(attr)
                for r in data_drop.split('; '):
                    match = re.match('([^0-9]+)([0-9]+)?', r)
                    drop = Drop(data_id=data.id, text=match.group(1), type=attr)
                    if match.group(2):
                        drop.num = int(match.group(2))
                    session.add(drop)
    session.commit()
    session.close()


if __name__ == '__main__':
    Parser().parse_all()
    drop_formatter()
